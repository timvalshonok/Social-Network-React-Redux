{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Users/users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","serviceWorker.js","api/api.js","redux/profile-reducer.js","redux/dialogs-reducer.js","redux/sidebar-reducer.js","redux/users-reducer.js","redux/auth-reducer.js","redux/redux-store.js","components/Navbar/Navbar.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx","assets/images/user.png","components/Users/Users.jsx","assets/images/preloader.svg","components/common/preloader/Preloader.js","components/Users/UsersContainer.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","authAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","initialState","posts","id","message","likesCount","newPostText","profile","profileReducer","state","action","type","newPost","newText","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","dialogs","name","messages","newMessageBody","dialogsReducer","body","sidebarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","toggleFollowingProgress","usersReducer","map","u","followed","count","filter","SET_USER_DATA","email","login","isAuth","authReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","store","createStore","applyMiddleware","thunkMiddleware","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","DialogItem","props","path","dialog","Message","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","value","onChange","e","target","updateNewMessageBody","placeholder","onClick","sendMessage","mapStateToPropsForRedirect","withAuthRedirect","Component","RedirectComponent","this","React","connect","compose","dispatch","updateNewMessageBodyCreator","Users","pagesCount","Math","ceil","pages","i","push","p","styles","selectedPage","onPageChanged","src","photos","small","userPhoto","disabled","some","unfollow","follow","status","Preloader","style","backgroundColor","preloader","UsersContainer","pageNumber","getUsers","resultCode","followSuccess","unfollowSuccess","setCurrentPage","items","totalCount","ProfileInfo","descriptionBlock","large","Post","MyPosts","postsElements","newPostElement","createRef","postsBlock","text","current","updateNewPostText","ref","addPost","MyPostsContainer","updateNewPostTextActionCreator","Profile","ProfileContainer","params","getUserProfile","withRouter","Header","header","loginBlock","HeaderContainer","getAuthUserData","setAuthUserData","Login","App","render","DialogsContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab84d0e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav___LKe0\",\"item\":\"Navbar_item__2HUxF\",\"activeLink\":\"Navbar_activeLink__4fKG9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3aU1r\",\"dialogsItems\":\"Dialogs_dialogsItems__2XZxB\",\"active\":\"Dialogs_active__1Ox1k\",\"messages\":\"Dialogs_messages__2JA4C\",\"message\":\"Dialogs_message__1Msgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__38_uc\",\"selectedPage\":\"users_selectedPage__1QY7t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1WxTr\",\"posts\":\"MyPosts_posts__2bdz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__9dsIE\",\"loginBlock\":\"Header_loginBlock__nlqIv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3C5hZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1e-iW\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:     {\r\n        \"API-KEY\": \"b1775b2f-c3a5-4509-8dc9-90b5629de7c3\"\r\n    }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n","import {usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ],\r\n    newPostText: 'it-kamasutra.com',\r\n    profile: null\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = () => ({type: ADD_POST})\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\n\r\nexport const getUserProfile = (userId) => (dispatch) => {\r\n    usersAPI.getProfile(userId).then(response => {\r\n        dispatch(setUserProfile(response.data));\r\n    });\r\n}\r\n\r\nexport const updateNewPostTextActionCreator = (text) =>\r\n    ({type: UPDATE_NEW_POST_TEXT, newText: text })\r\n\r\nexport default profileReducer;","const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ],\r\n    newMessageBody: \"\"\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            };\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE})\r\nexport const updateNewMessageBodyCreator = (body) =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: body})\r\n\r\nexport default dialogsReducer;","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [ ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map( u =>  {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map( u =>  {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId })\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId })\r\nexport const setUsers = (users) => ({type: SET_USERS, users })\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage })\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching })\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\nexport const getUsers = (currentPage, pageSize) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setTotalUsersCount(data.totalCount));\r\n        });\r\n    }\r\n}\r\nexport const follow = (userId) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode == 0) {\r\n                    dispatch(followSuccess(userId));\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            });\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.unfollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode == 0) {\r\n                    dispatch(unfollowSuccess(userId));\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            });\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import {authAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login) => ({type: SET_USER_DATA, data: {userId, email, login}  })\r\nexport const getAuthUserData = () => (dispatch) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data;\r\n                dispatch(setAuthUserData(id, email, login));\r\n            }\r\n        });\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from 'react-router';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n    }\r\n\r\n    let onNewMessageChange = (e) => {\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body);\r\n    }\r\n\r\n    if (!props.isAuth === false) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n                <div>\r\n                    <div><textarea value={newMessageBody}\r\n                                   onChange={onNewMessageChange}\r\n                                   placeholder='Enter your message'></textarea></div>\r\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return connectedAuthRedirectComponent;\r\n\r\n}","import React from 'react';\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator());\r\n        },\r\n        updateNewMessageBody: (body) => {\r\n            dispatch(updateNewMessageBodyCreator(body));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n;","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport * as axios from \"axios\";\r\nimport {toggleFollowingProgress} from \"../../redux/users-reducer\";\r\nimport {usersAPI} from \"../../api/api\";\r\n\r\nlet Users = (props) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p && styles.selectedPage}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + u.id}>\r\n                        <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={props.followingInProgress\r\n                                .some(id => id === u.id)}\r\n                                      onClick={() => { props.unfollow(u.id) }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={() => { props.follow(u.id) }}>\r\n                                      Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/preloader.5788b05c.svg\";","import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nlet Preloader = (props) => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow, toggleFollowingProgress, getUsers\r\n} from '../../redux/users-reducer';\r\nimport * as axios from 'axios';\r\nimport Users from './Users';\r\nimport Preloader from \"../common/preloader/Preloader\";\r\nimport {usersAPI} from \"../../api/api\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            { this.props.isFetching ? <Preloader /> : null }\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                        pageSize={this.props.pageSize}\r\n                        currentPage={this.props.currentPage}\r\n                        onPageChanged={this.onPageChanged}\r\n                        users={this.props.users}\r\n                        follow={this.props.follow}\r\n                        unfollow={this.props.unfollow}\r\n                        followingInProgress={this.props.followingInProgress}\r\n             />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps,\r\n        {follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers})\r\n)(UsersContainer)","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large} />\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements =\r\n        props.posts.map( p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={ onPostChange } ref={newPostElement}\r\n                              value={props.newPostText} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={ onAddPost }>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextActionCreator(text);\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator());\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile} from \"../../redux/profile-reducer\";\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = 2;\r\n        }\r\n        this.props.getUserProfile(userId);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n});\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n    )(ProfileContainer);\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n\r\n        <div className={s.loginBlock}>\r\n            { props.isAuth ? props.login\r\n                : <NavLink to={'/login'}>Login</NavLink> }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n    componentDidMount() {\r\n      this.props.getAuthUserData();\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAuthUserData})(HeaderContainer);","import React from 'react';\r\n\r\nconst Login = (props) => {\r\n    return <h1>LOGIN</h1>\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {Route} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from './components/Login/Login';\r\n\r\nconst App = () => {\r\n    return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer />\r\n                <Navbar />\r\n                <div className='app-wrapper-content'>\r\n                    <Route path='/dialogs'\r\n                           render={ () => <DialogsContainer /> }/>\r\n\r\n                    <Route path='/profile/:userId?'\r\n                           render={ () => <ProfileContainer /> }/>\r\n\r\n                    <Route path='/users'\r\n                           render={ () => <UsersContainer /> }/>\r\n\r\n                    <Route path='/login~'\r\n                           render={ () => <Login /> }/>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default App;","import * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/redux-store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}